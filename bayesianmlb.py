# -*- coding: utf-8 -*-
"""BayesianMLB.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1tldtLXk0TFWw5tEM6IIv593-8MxixBCM
"""

!pip install MLB-StatsAPI

# Import Libraries
import statsapi
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.linear_model import BayesianRidge

# 1. Get the team ID (e.g., for the New York Yankees)
team_id = statsapi.lookup_team('Yankees')[0]['id']

# 2. Fetch the roster for the team
roster_data = statsapi.get('team_roster', {'teamId': team_id})
players = roster_data['roster']  # Access the actual list of players

# 3. Fetch the schedule for the team
team_schedule = statsapi.schedule(start_date="2024-03-30", end_date="2024-09-30", team=team_id)

# Calculate the number of games played
games_played = len([game for game in team_schedule if game.get('status') == 'Final'])
total_games = 162  # MLB regular season usually has 162 games
remaining_games = total_games - games_played

# 4. Collect stats for each player
player_stats = []
for player in players:
    player_id = player['person']['id']
    stats = statsapi.player_stat_data(player_id, group="hitting", type="season")

    if stats and 'stats' in stats and stats['stats']:
        player_name = player['person']['fullName']
        hitting_stats = stats['stats'][0]['stats']

        if all(k in hitting_stats for k in ['avg', 'homeRuns', 'rbi']):
            games_played_by_player = int(stats['stats'][0]['stats']['gamesPlayed'])
            rbi_per_game = hitting_stats['rbi'] / games_played_by_player

            player_stats.append({
                'name': player_name,
                'avg': float(hitting_stats['avg']),
                'homeRuns': int(hitting_stats['homeRuns']),
                'rbi': int(hitting_stats['rbi']),
                'games_played': games_played_by_player,
                'rbi_per_game': rbi_per_game
            })

# 5. Convert collected data to a DataFrame
df = pd.DataFrame(player_stats)
print(df)

# 6. Prepare data for Bayesian Ridge Regression
X = df[['avg', 'homeRuns']].values
y = df['rbi_per_game'].values

# 7. Fit the Bayesian Ridge Regression model
model = BayesianRidge()
model.fit(X, y)

# 8. Make projections for RBIs based on remaining games
y_pred_per_game = model.predict(X)
df['rbi_projection'] = y_pred_per_game * remaining_games + df['rbi']  # Add current RBIs to projected RBIs

# 9. Visualize the results
df_sorted = df[['name', 'rbi', 'rbi_projection']].sort_values(by='rbi_projection', ascending=False).set_index('name')
df_sorted.plot(kind='bar')
plt.title('Projected RBIs for the Remainder of the Season')
plt.ylabel('RBIs')
plt.show()