# -*- coding: utf-8 -*-
"""BayesianMLBST.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1mXurqW-MKpb2IsBIdpYB4kXrjinOo7XV
"""

import streamlit as st
import statsapi
import pandas as pd
import numpy as np
import altair as alt
from sklearn.linear_model import BayesianRidge

# Function to fetch player stats
def get_player_stats(team_id, stat_type):
    roster_data = statsapi.get('team_roster', {'teamId': team_id})
    players = roster_data['roster']

    team_schedule = statsapi.schedule(start_date="2024-03-30", end_date="2024-09-30", team=team_id)
    games_played = len([game for game in team_schedule if game.get('status') == 'Final'])
    total_games = 162
    remaining_games = total_games - games_played

    player_stats = []
    for player in players:
        player_id = player['person']['id']
        stats = statsapi.player_stat_data(player_id, group="hitting", type="season")

        if stats and 'stats' in stats and stats['stats']:
            hitting_stats = stats['stats'][0]['stats']
            games_played_by_player = int(stats['stats'][0]['stats']['gamesPlayed'])

            if stat_type == 'RBIs':
                stat = hitting_stats.get('rbi', 0)
            elif stat_type == 'Home Runs':
                stat = hitting_stats.get('homeRuns', 0)
            elif stat_type == 'Hits':
                stat = hitting_stats.get('hits', 0)

            stat_per_game = stat / games_played_by_player if games_played_by_player > 0 else 0

            player_stats.append({
                'name': player['person']['fullName'],
                'stat': stat,
                'stat_per_game': stat_per_game
            })

    return pd.DataFrame(player_stats), remaining_games

# Streamlit UI
st.title("MLB Player Stat Projections")

# Team selection
teams = statsapi.lookup_team('')
team_names = [team['name'] for team in teams]
team_name = st.selectbox("Select a team", team_names)
team_id = next(team['id'] for team in teams if team['name'] == team_name)

# Stat selection
stat_type = st.selectbox("Select a stat to project", ["RBIs", "Home Runs", "Hits"])

# Fetch player stats and remaining games
df, remaining_games = get_player_stats(team_id, stat_type)

# Fit Bayesian Ridge Regression model
X = np.ones((len(df), 1))  # Simple model with no features, just projecting based on current rate
y = df['stat_per_game'].values

model = BayesianRidge()
model.fit(X, y)

# Make projections
y_pred_per_game = model.predict(X)
df['projection'] = y_pred_per_game * remaining_games + df['stat']

# Visualize the results using Altair
chart = alt.Chart(df).mark_bar().encode(
    x=alt.X('name', sort='-y', title='Player'),
    y=alt.Y('projection', title=f'Projected {stat_type}'),
    tooltip=['name', 'stat', 'projection']
).properties(
    title=f'Projected {stat_type} for {team_name} Players'
).interactive()

st.altair_chart(chart, use_container_width=True)